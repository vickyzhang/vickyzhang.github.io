<?xml version="1.0"  encoding="UTF-8"?>
<rss version="2.0">  <channel>
    <title>Vicky&#39;s color</title>
    <link>http://blog.cyanme.com</link>
    <pubDate>17 Mar 16 13:29 CST</pubDate>
    <item>
      <title>mysql 索引</title>
      <link>http://blog.cyanme.com/general/mysql-%E7%B4%A2%E5%BC%95/</link>
      <pubDate>2016-03-16 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;SHOW INDEX FROM t1  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;优点：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;通过创建唯一索引，保证数据库表每行数据的唯一性。&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;提高查询速度。&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;在使用分组和排序时，可以减少查询中分组和排序时间。&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;缺点:&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;维护索引需要耗费数据库资源。&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;索引需要占用磁盘空间。&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;当对表的说进行增删改的时候，因为要维护索引，索引速度会受到影响。&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;分类：&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;普通索引和维护索引，主键索引是一种特殊的唯一索引，不允许空值。&lt;br /&gt;&#xA;    CREATE TABLE t1&#xA;    (&#xA;        id INT NOT NULL,&#xA;        NAME CHAR(30) NOT NULL,&#xA;        UNIQUE INDEX UniqIdx(id)   #创建唯一索引 索引名称UniqIdx 字段为id&#xA;    );&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;SHOW CREATE TABLE t1; &#xA;    CREATE TABLE `t1` (                                             &#xA;    `id` int(11) NOT NULL,                                     &#xA;    `name` char(30) NOT NULL,                                  &#xA;    UNIQUE KEY `UniqIdx` (`id`)                                &#xA;) ENGINE=MyISAM DEFAULT CHARSET=utf8  &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;单列索引和复合索引。&#xA;复合索引指多个字段上创建的索引，只有在查询条件中使用创建索引时的第一个字段，使用复合索引时遵循最左前缀集合。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CREATE TABLE t3 (&#xA;  id INT NOT NULL,&#xA;  name CHAR(30) NOT NULL,&#xA;  age INT NOT NULL,&#xA;  info VARCHAR (255),&#xA;  INDEX MultiIdx (id, NAME, age (100))&#xA;);&#xA;SHOW CREATE TABLE t3;&#xA;CREATE TABLE `t3` (                                              &#xA;          `id` int(11) NOT NULL,                                 &#xA;          `name` char(30) NOT NULL,                              &#xA;          `age` int(11) NOT NULL,                                &#xA;          `info` varchar(255) DEFAULT NULL,                      &#xA;          KEY `MultiIdx` (`id`,`NAME`,`age`)  # where条件句里面只要有id的查询都会用到这个复合索引&#xA;) ENGINE=MyISAM DEFAULT CHARSET=utf8&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;全文索引&#xA;全文索引类型为FULLTEXT，在定义索引的列上支持值的全文查找，允许在这些索引列中插入重复值和空值。全文索引可以在CHAR、VARCHAR、TEXT类型列上创建。MYSQL只有MYISAM存储引擎支持全文索引&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CREATE TABLE t4 (&#xA;    id INT NOT NULL,&#xA;    name CHAR(30) NOT NULL,&#xA;    age INT NOT NULL,&#xA;    info VARCHAR (255),&#xA;    FULLTEXT INDEX FulltxtIdx (info)&#xA;) ENGINE = MYISAM&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;空间索引&#xA;空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。MYSQL使用SPATIAL关键字进行扩展，使得能够用于创建正规索引类型的语法创建空间索引。空间索引必须在MYISAM类型的表中创建，而且空间类型的字段必须为非空&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;CREATE TABLE t5&#xA;    (g GEOMETRY NOT NULL ,SPATIAL INDEX spatIdx(g))ENGINE=MYISAM;&#xA;SHOW CREATE TABLE t5;&#xA;CREATE TABLE `t5` (                                                                                            &#xA;          `g` GEOMETRY NOT NULL,                                                                                       &#xA;          SPATIAL KEY `spatIdx` (`g`)                                                                                  &#xA;) ENGINE=MYISAM DEFAULT CHARSET=utf8  ;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;</description>
    </item>
    <item>
      <title>Mysql 触发器</title>
      <link>http://blog.cyanme.com/general/Mysql-%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>2016-03-16 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;之前写了一个数据库写操作脚本，定时执行，但是在检查结果时，发现我操作的数据有问题。多次检查脚本都确定没有问题，所以想到给数据表添加行触发器，检查脚本执行情况。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;USE rootdb;&#xA;DROP TRIGGER oversee_emp_sup; &#xA;DELIMITER $  #定义定界符&#xA;CREATE TRIGGER oversee_emp_sup AFTER UPDATE ON hr_employee&#xA;FOR EACH ROW  &#xA;BEGIN&#xA;DECLARE msg VARCHAR(300);  &#xA;    INSERT hr_oversee (emp_sn,old_value,new_value,craete_time) VALUES (new.emp_sn,old.emp_superior,new.emp_superior,new.modifytime);&#xA;    IF(new.emp_superior = &#39;&#39; &amp;amp;&amp;amp;  old.emp_superior &amp;lt;&amp;gt; &#39;&#39;  ) THEN &#xA;    SET msg = &amp;quot;用户更改上级错误.&amp;quot;;  &#xA;            SIGNAL SQLSTATE &#39;HY000&#39; SET MESSAGE_TEXT = msg;  &#xA;    END IF;&#xA;END;&#xA;$  #结束定界符&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;监控数据更新时，往临时数据表中添加数据，并且出现上级字段为空是返回错误。目前还在监控执行中，不过已经可以确定不是我脚本的问题，我也甚是欣慰啊。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这里就简单说下mysql触发器；&lt;/p&gt;&#xA;&#xA;&lt;p&gt;触发器的4个要素：&lt;/p&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;监视地点（table）&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;监视事件（insert|update|delete）&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;触发时间（after|before）&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;触发事件（insert|update|delete）&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;语法：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;create trigger triggerName&#xA;after/before insert/update/delete on 表名&#xA;for each row   #这句话在mysql是固定的&#xA;begin&#xA;sql语句;&#xA;end;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>MyISAM和InnoDB的区别</title>
      <link>http://blog.cyanme.com/general/MyISAM%E5%92%8CInnoDB%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>2016-03-16 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;1.mysql默认引擎采用MyISAM。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2.MyISAM不支持事务，InnoDB支持事务。InnoDB的autocommit 默认打开，即每条sql默认被封装为一个事务，自动提交。这样会影响速度，所以最好是吧多条sql语句显示放在begin和commit之间。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3.InnoDB支持行锁，MyISAM只支持到表锁。MyISAM同一张表上的读锁和写锁互斥，并且默认写请求优先级高，所以MyISAM不是用于大量查询和修改并存的情况，会导致进程长时间阻塞。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;4.InnoDB支持外键，MyISAM不支持外键。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;5.InnoDB不支持全文索引，MyISAM支持。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;6.MyISAM有内置计数器，当count(*)没有where条件时，MyISAM的读取速度更快。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>apache 配置虚拟主机</title>
      <link>http://blog.cyanme.com/general/apache-%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/</link>
      <pubDate>2015-12-08 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;公司测试服务器默认80端口访问公司网站，近期新建一个项目，需要在测试服务器配置端口访问&lt;/p&gt;&#xA;&#xA;&lt;p&gt;首先，修改apache 配置文件 httpd.conf&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Listen 81 //监听81端口 &#xA;&#xA;&amp;lt;VirtualHost *:81&amp;gt;  &#xA;    ServerAdmin www.59shopnc.com  &#xA;    DocumentRoot &amp;quot;/var/www2/shopnc&amp;quot;  &#xA;    ServerName www.59shopnc.com  &#xA;    ErrorLog &amp;quot;/tmp/logs/shopnc-error.log&amp;quot;  &#xA;    CustomLog &amp;quot;/tmp/logs/shopnc-access.log&amp;quot; common  &#xA;    &amp;lt;Directory &amp;quot;/var/www2/shopnc&amp;quot;&amp;gt;  &#xA;        Options Indexes FollowSymLinks  &#xA;        AllowOverride None  &#xA;        Order allow,deny  &#xA;        Allow from all  //apache 2.2  &#xA;        Require all granted  //apache 2.4  &#xA;    &amp;lt;/Directory&amp;gt;  &#xA;&amp;lt;/VirtualHost&amp;gt;  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;重启apache&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Linux学习03 vsftp 新增用户</title>
      <link>http://blog.cyanme.com/general/Linux%E5%AD%A6%E4%B9%A003-vsftp-%E6%96%B0%E5%A2%9E%E7%94%A8%E6%88%B7/</link>
      <pubDate>2015-12-07 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;新增个ftp用户 也是弄了小半天&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# useradd test  //新增用户test&#xA;# passwd tset&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;//输入密码设置&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# usermod -d /home/php //设置权限&#xA;# usermod -s /sbin/nologin test //限制test只能登录ftp&#xA;# usermod -s /sbin/bash test //回复test正常&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;限制用户只能访问/home/test，不能访问其他路径&lt;/p&gt;&#xA;&#xA;&lt;p&gt;修改/etc/vsftpd/vsftpd.conf如下：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#chroot_list_enable=YES //限制访问自身目录  &#xA;#chroot_list_file=/etc/vsftpd/vsftpd.chroot_list  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;编辑 vsftpd.chroot_list文件，将受限制的用户添加进去，每个用户名一行&lt;/p&gt;&#xA;&#xA;&lt;p&gt;改完配置文件，不要忘记重启vsFTPd服务器&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;# /etc/init.d/vsftpd restart  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;如果需要允许用户修改密码，但是又没有telnet登录系统的权限：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#usermod -s /usr/bin/passwd test //用户telnet后将直接进入改密界面  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>Linux 学习笔记02</title>
      <link>http://blog.cyanme.com/general/Linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002/</link>
      <pubDate>2015-11-17 12:00:00 +0800</pubDate>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;重启memcache ： /etc/init.d/memcached restart&lt;/li&gt;&#xA;&lt;li&gt;查看Apache日志 ：/var/log/error-log    或者先查看日志地址： /etc/httpd/conf/httpd.conf   查找 /CustomLog&lt;/li&gt;&#xA;&lt;li&gt;查看之前输入命令 ：history&lt;/li&gt;&#xA;&lt;li&gt;查找文件位置 ： find / -name &amp;ldquo;httpd.conf&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;清空日志文件： echo &amp;ldquo;&amp;rdquo; &amp;gt; error.log&lt;/li&gt;&#xA;&lt;li&gt;给文件权限：  chmod +x a.sh&lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;查看服务器定时任务 ： crontab -l&lt;/li&gt;&#xA;&lt;li&gt;编辑服务器定时任务 ： crontab -e&#xA;&#xA;&lt;br /&gt;&#xA;&#xA;&lt;br /&gt;&#xA;&#xA;&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;</description>
    </item>
    <item>
      <title>Mysql 学习笔记01-- 关于sql_mode</title>
      <link>http://blog.cyanme.com/general/Mysql-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001---%E5%85%B3%E4%BA%8Esql_mode/</link>
      <pubDate>2015-10-27 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;对于SQL_MODE的设置，可以在MySQL的配置文件如my.cnf和my.ini中进行，也可以在客户端工具中进行，并且可以分别进行全局的设置或当前会话的设&#xA;置。下面的命令可以用来查看当前SQL_MODE的设置情况。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;select @@global.sql_mode; //查看全局模式  &#xA;&#xA;select @@session.sql_mode; //查看当前回话模式&#xA;&#xA;set @@global.sql_mode = &#39;&#39;; | set @@global.sql_mode = &#39;staict_trans_tables&#39;;&#xA;//设置mysql为宽松模式或者严格模式&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;NO_UNSIGNED_SUBTRACTION 表示没有定义&lt;/p&gt;&#xA;&#xA;&lt;p&gt;严格模式是指将SQL_MODE变量设置为STRICT_TRANS_TABLES或STRICT_ALL_TABLES中的至少一种。现在来看一下SQL_MODE&#xA;可以设置的选项。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;STRICT_TRANS_TABLES：在该模式下，如果一个值不能插入到一个事务表(例如表的存储引擎为InnoDB)中，则中断当前的操作不影响非事务表(例如&#xA;表的存储引擎为MyISAM)。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;ALLOW_INVALID_DATES：该选项并不完全对日期的合法性进行检查，只检查月份是否在1～12之间，日期是否在1～31之间。该模式仅对DATE和DA&#xA;TETIME类型有效，而对TIMESTAMP无效，因为TIMESTAMP总是要求一个合法的输入。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;ANSI_QUOTES：启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它将被解释为识别符&lt;/p&gt;&#xA;&#xA;&lt;p&gt;ERROR_FOR_DIVISION_BY_ZERO：在INSERT或UPDATE过程中，如果数据被零除(或MOD(X，0))，则产生错误(否则为警告)。如&#xA;果未给出该模式，那么数据被零除时MySQL返回NULL。如果用到INSERT IGNORE或UPDATE&#xA;IGNORE中，MySQL生成被零除警告，但操作结果为NULL。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;HIGH_NOT_PRECEDENCE NOT：操作符的优先顺序是表达式。例如，NOT a BETWEEN b AND c被解释为NOT(a BETWEEN&#xA;b AND c)，在一些旧版本MySQL中， 前面的表达式被解释为(NOT a)BETWEEN b AND c。启用HIGH_NOT_PRECEDENCE&#xA;SQL模式，可以获得以前旧版本的更高优先级的结果。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;IGNORE_SPACE：函数名和括号“(”之间有空格。除了增加一些烦恼，这个选项好像没有任何好处，要访问保存为关键字的数据库、表或列名，用户必须引用该选项&#xA;。例如某个表中有user这一列，而MySQL数据库中又有user这个函数， user会被解释为函数，如果想要选择user这一列，则需要引用。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;NO_AUTO_CREATE_USER：禁止GRANT创建密码为空的用户。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;NO_AUTO_VALUE_ON_ZERO：该选项影响列为自增长的插入。在默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该&#xA;列又是自增长的，那么这个选项就有用了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;NO_BACKSLASH_ESCAPES：反斜杠“\”作为普通字符而非转义符，&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>Linux 学习笔记01</title>
      <link>http://blog.cyanme.com/general/Linux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</link>
      <pubDate>2015-10-27 12:00:00 +0800</pubDate>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;Linux 关机命令:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;init 0;&#xA;shutdown -t 0;&#xA;shutdown now;&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Linux 查看FTP状态是否正常: ps -ef | grep ftp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如果没有任何ftp关键字信息，则判断服务是否开启&lt;/p&gt;&#xA;&#xA;&lt;p&gt;service vsftpd status&lt;/p&gt;&#xA;&#xA;&lt;p&gt;开启：service vsftpd start&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Linux 查看系统时间 ：date&lt;/p&gt;&#xA;&#xA;&lt;p&gt;设置系统时间：date -s &amp;lsquo;2015-10-27 16:09:01&amp;rsquo;&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;</description>
    </item>
    <item>
      <title>php 字符串转化为数字</title>
      <link>http://blog.cyanme.com/general/php-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%95%B0%E5%AD%97/</link>
      <pubDate>2015-09-28 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;PHP是一门弱语言，当你用字符串类型和数字类型直接比较时，PHP会进行自动类型转换，把字符串类型转换为数字类型，然后进行比较。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;但是这里要提到的是一个特殊的值：E，E作为科学计数法中的一种&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$a = &#39;6E01&#39;;&#xA;if( 6 == $a ){&#xA;    echo &#39;equal&#39;.&#39;&amp;lt;br/&amp;gt;&#39;;&#xA;}else{&#xA;    echo &#39;not equal&#39;.&#39;&amp;lt;br/&amp;gt;&#39;;&#xA;}&#xA;&#xA;&#xA;//输出 &#39;not equal &#39;&#xA;$b = &#39;5C01&#39;;&#xA;if( $b == 5){&#xA;    echo &#39;aaa&#39;;&#xA;}else{&#xA;    echo &#39;bbb&#39;;&#xA;}&#xA;&#xA;&#xA;//输出‘aaa’&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;代码中可以看出，第一个输出为not equal 原因是 $a 被自动转换为 60 ，而不是6&#xA;那么这个时候 想要实现 字符串 6E01 == 6 就不能靠PHP 自动类型转换，而是需要强制类型转换&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;if( 6 ==  (int) $a ){&#xA;    echo &#39;equal&#39;.&#39;&amp;lt;br/&amp;gt;&#39;;&#xA;}else{&#xA;    echo &#39;not equal&#39;.&#39;&amp;lt;br/&amp;gt;&#39;;&#xA;}&#xA;// 输出 equal&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;另外 Eric 提供intval() 方法，不过进我查证，强制装换(int) 执行速度更快。&#xA;总的来说 是个小问题，记下来只是想多提醒自己 多注意细节。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>SQL Server 学习3(关于sql server中文取值不完整问题)</title>
      <link>http://blog.cyanme.com/general/SQL-Server-%E5%AD%A6%E4%B9%A03%28%E5%85%B3%E4%BA%8Esql-server%E4%B8%AD%E6%96%87%E5%8F%96%E5%80%BC%E4%B8%8D%E5%AE%8C%E6%95%B4%E9%97%AE%E9%A2%98%29/</link>
      <pubDate>2015-09-22 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;PHP通过ODBC连接SQL Server 数据库，查询结果中文显示不完整的问题，今天折腾了一下午。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cyanme.com/content/uploadfile/201509/6f961442916215.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在百度，Googl上搜索了一下午都没明白怎么回事。都开始怀疑是不是 值本身有问题了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;终于在无意中 看到 &lt;code&gt;SELECT&lt;/code&gt; &lt;code&gt;CONVERT&lt;/code&gt;&lt;code&gt;(NVARCHAR(1),&lt;/code&gt;&lt;code&gt;&#39;中国&#39;&lt;/code&gt;&lt;code&gt;)写法 ，又想起同事友情提示，会不会是中文长度受限制。&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;果然不出意外，就是字符长度问题。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;SELECT DEPTID,DESCR,MANAGER_ID,CONVERT(NVARCHAR(20),CST_DEPT_CLASS) as&#xA;CST_DEPT_CLASS,DEPTID2,LASTUPDDTTM FROM PS_CST_DEPT_I_VW ORDER BY LASTUPDDTTM&#xA;ASC&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;http://cyanme.com/content/uploadfile/201509/befa1442916511.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;数据总算正常了，&lt;/p&gt;&#xA;&#xA;&lt;p&gt;建议有中文的查询，都加上 CONVERT的长度限制，避免问题重现。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;不过这个工作还是明天来弄，今儿就先下班了。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>SQL Server 学习2(数据库贴表)</title>
      <link>http://blog.cyanme.com/general/SQL-Server-%E5%AD%A6%E4%B9%A02%28%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B4%B4%E8%A1%A8%29/</link>
      <pubDate>2015-09-22 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;数据库中一张表的数据 导入 另一张数据表&lt;/p&gt;&#xA;&#xA;&lt;p&gt;当两张表的字段完全一致的时候，我们可以直接使用：insert into tab_a select * from tab_b&lt;/p&gt;&#xA;&#xA;&lt;p&gt;有字段不同的情况写写法也类似：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;INSERT INTO PS_JOBCODE_LANG&#xA;(SETID,JOBCODE,LANGUAGE_CD,EFFDT,DESCR,DESCRSHORT,GVT_OFFICIAL_DESCR )  &#xA;select SETID,JOBCODE,&#39;ZHS&#39;,EFFDT,DESCR,DESCRSHORT,&#39; &#39; from PS_JOBCODE_TBL&#xA;where JOBCODE not in (select JOBCODE from PS_JOBCODE_LANG )&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;说明：LANGUAGE_CD 中的 LANGUAGE_CD 值固定为&amp;rsquo;ZHS&amp;rsquo; ，而GVT_OFFICIAL_DESCR 的值为空 并且这两个字段不存在于&#xA;PS_JOBCODE_TBL 中，所以直接把值填入即可。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;（SQL Server 和Mysql 均可使用）&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>SQL Server 学习</title>
      <link>http://blog.cyanme.com/general/SQL-Server-%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>2015-09-10 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;1.查询表结构 ： sp_help table_name;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;查询结果如下 &#xA;&#xA;![](http://cyanme.com/content/uploadfile/201509/02c21441874839.png)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;2.如上，Tpye 是nvarchar 类型 是 Unicode字符， 如其值为 中文的话，那么非英文字符串查询应该写为 like  N&amp;rsquo;%你好%&amp;lsquo;;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>技术要更新</title>
      <link>http://blog.cyanme.com/general/%E6%8A%80%E6%9C%AF%E8%A6%81%E6%9B%B4%E6%96%B0/</link>
      <pubDate>2015-09-02 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;今天跟大E同学聊天的时候，想起自己上个月参加的面试，当时是有嗲尴尬的。说一下面试公司使用的技术吧。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;数据库方面用的Redis 的nosql 数据库。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;后台逻辑使用的Node.js 处理。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;最后还吐槽了一句：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;“PHP我们只拿来写接口”。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;有点伤心难过的同时也知道了自己的技术要更新。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;不过更新新技术之前，需要先把PHP玩的更透彻才可以。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>PHP date函数常用参数</title>
      <link>http://blog.cyanme.com/general/PHP-date%E5%87%BD%E6%95%B0%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/</link>
      <pubDate>2015-09-02 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;&amp;lt;php&#xA;echo date(&amp;quot;j&amp;quot;);//输出月份中的第几天 1~31天  返回的是string&#xA;echo date(&amp;quot;t&amp;quot;,strtotime(&amp;quot;2013-02-12&amp;quot;));//给定月份的天数，（28-31）返回string 28&#xA;echo date(&#39;w&#39;); //返回星期几（0为星期天，6为星期六）&#xA;&#xA;//获取上月/当前月 的第一天/最后一天&#xA;echo date(&#39;the first day of last/this month&#39;);&#xA;echo date(&#39;the last day of last/this month&#39;);&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>JS 处理json字符串</title>
      <link>http://blog.cyanme.com/general/JS-%E5%A4%84%E7%90%86json%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>2015-09-02 12:00:00 +0800</pubDate>
      <description>&lt;h3&gt;JSON字符串:&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var str1 = &#39;{ &amp;quot;name&amp;quot;: &amp;quot;cxh&amp;quot;, &amp;quot;sex&amp;quot;: &amp;quot;man&amp;quot; }&#39;;&#xA;JSON对象:&#xA;var str2 = { &amp;quot;name&amp;quot;: &amp;quot;cxh&amp;quot;, &amp;quot;sex&amp;quot;: &amp;quot;man&amp;quot; };&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;一、JSON字符串转换为JSON对象&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;要运用上面的str1，必须运用下面的要领先转化为JSON对象：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;//由JSON字符串转换为JSON对象&#xA;var obj = eval(&#39;(&#39; + str + &#39;)&#39;);&#xA;或者&#xA;var obj = str.parseJSON(); //由JSON字符串转换为JSON对象&#xA;或者&#xA;var obj = JSON.parse(str); //由JSON字符串转换为JSON对象&#xA;然后，就可以这样读取：&#xA;Alert(obj.name);&#xA;Alert(obj.sex);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;特别留心：如果obj本来就是一个JSON对象，那么运用 eval（）函数转换后（哪怕是多次转换）还是JSON对象，但是运用 parseJSON（）函数处理后会有疑问（抛出语法异常）。&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;二、可以运用 toJSONString()或者全局要领 JSON.stringify()将JSON对象转化为JSON字符串。例如：&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var last=obj.toJSONString(); //将JSON对象转化为JSON字符&#xA;或者&#xA;var last=JSON.stringify(obj); //将JSON对象转化为JSON字符&#xA;alert(last); &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>网站主题变更</title>
      <link>http://blog.cyanme.com/general/%E7%BD%91%E7%AB%99%E4%B8%BB%E9%A2%98%E5%8F%98%E6%9B%B4/</link>
      <pubDate>2015-09-01 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;网站之前使用的WordPress，WP的好处就是主题模板选择相当多，基本上不收费，插件也比较丰富。本来我还是用的比较顺心的。但是当我有一天登录后台，看到有上百条垃圾评论的时候，当时就崩溃了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;想到近期，同事没事就在耳边念叨，说EMLOG好用啊，好用，每天都要问我一遍，有没有把网站改为EMLOG的。然后又想到我的垃圾评论，所以啊，干脆就给他整个博客主题给换了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;代码其实很简单，大家都是 点击安装的类型。麻烦一点的就是数据库转移。然后就当做自己写接口练手。（好在之前的时候 东西就比较少）。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;代码我就不上传了，写得有点丑。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;只要就是庆祝把EMLOG配置好，并且SVN也搭建完成。以后又有玩的了。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>常用工具。</title>
      <link>http://blog.cyanme.com/general/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E3%80%82/</link>
      <pubDate>2015-09-01 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;其实就是两个一个WinSCP方便对Linux的文件，权限的管理。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;然后就是Xshell 主要是对Linux进行命令控制。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;还有个好用的工具是 Beyond Compare 主要是便于对文件的比较。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;其实都是桥大神推荐使用的，都很不错，赞一个。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>php 静态变量</title>
      <link>http://blog.cyanme.com/general/php-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/</link>
      <pubDate>2015-06-10 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;静态变量只存在于函数作用域内，也就是说，静态变量只存活在栈中。一般的函数内变量在函数结束后会释放，比如局部变量，但是静态变量却不会。就是说，下次再调用这个函&#xA;数的时候，该变量的值会保留下来。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;只要在变量前加上关键字static，该变量就成为静态变量了。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?php &#xA;function test() {&#xA;    static $nm = 1;&#xA;&#xA;    $nm = $nm * 2;&#xA;&#xA;    print $nm.&amp;quot;&amp;amp;lt;br /&amp;amp;gt;&amp;quot;;&#xA;&#xA;}&#xA;&#xA;// 第一次执行，$nm = 2 &#xA;test();&#xA;&#xA;// 第二次执行，$nm = 4 &#xA;test();&#xA;&#xA;// 第三次执行，$nm = 8 &#xA;test();&#xA;&#xA;?&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;输出结果 ： 2 4 8&lt;/p&gt;&#xA;&#xA;&lt;p&gt;函数test()执行后，变量$nm的值都保存了下来了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;忍不住贴一段 今儿栽跟头的代码（已经更改后的） 递归加静态变量&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>mysql 自动备份</title>
      <link>http://blog.cyanme.com/general/mysql-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</link>
      <pubDate>2015-03-05 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;在桥大神的指导下，自己写了个自己认为高大上的脚本。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;还记得之前组长喊我们写个定时执行的脚本，我觉得很高大上，然后就说不会，嘿嘿 现在技能已get。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;哈哈哈 首先确认是否安装crontab&lt;/p&gt;&#xA;&#xA;&lt;p&gt;没有安装的话 yum install crontabs&lt;/p&gt;&#xA;&#xA;&lt;p&gt;service crond start&lt;/p&gt;&#xA;&#xA;&lt;p&gt;mkdir mysqlback&lt;/p&gt;&#xA;&#xA;&lt;p&gt;vim /opt/mysqlback/mysql_back.sh&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh &#xA;&#xA;#mysql数据库备份成sql文件并压缩 &#xA;&#xA;#并删除7天前创建的备份。 &#xA;&#xA;backupdir=/opt/mysqlback &#xA;&#xA;mysqlpath=/usr/local/mysql/bin/ &#xA;&#xA;time=` date +%Y%m%d ` &#xA;&#xA;$mysqlpath/mysqldump -h127.0.0.1 -uroot -pluobo mydb | gzip &amp;amp;gt; &#xA;&#xA;$backupdir/mydb$time.sql.gz $mysqlpath/mysqldump -h127.0.0.1 -uroot -pluobo mydb1 | gzip &amp;amp;gt;&#xA;&#xA; $backupdir/mydb1$time.sql.gz&#xA;&#xA;&#xA;&#xA; #删除超过7天的备份 &#xA;&#xA;find $backupdir -name &amp;quot;mydb*.sql.gz&amp;quot; -type f -mtime +7 -exec rm {} ; &amp;amp;gt; /dev/null 2&amp;amp;gt;&amp;amp;amp;1 &#xA;&#xA;find $backupdir -name &amp;quot;mydb1*.sql.gz&amp;quot; -type f -mtime +7 -exec rm {} ; &amp;amp;gt; /dev/null 2&amp;amp;gt;&amp;amp;amp;1&#xA;&#xA; :wq! &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;crontab -e&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;设置自动备份时间（定时执行备份）&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;0 0 * * * /opt/mysqlbak/mysql_back.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;说明一下： backupdir 是存放备份文件的文件夹 时间说明：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;分 时 日 月 周（周为周一-周日，周一是1，周日是7）时间用空格隔开。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;特殊字符：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;* 表示任何&#xA;&#xA;,表示多个情况 &#xA;&#xA;15,16,17 表示3个时间都执行 &#xA;&#xA;\- 表示范围 &#xA;&#xA;*/5 表示每个5个单位时间&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>短暂接触Extjs</title>
      <link>http://blog.cyanme.com/general/%E7%9F%AD%E6%9A%82%E6%8E%A5%E8%A7%A6Extjs/</link>
      <pubDate>2015-02-06 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;听说Extjs现在很少有公司使用了，不过既然我们公司让用了，那我还是写点备注，方便下次使用的时候方便查找。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;先说一下使用手册，手册可以有在线版本，和本地版本，&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在线版本：&lt;a href=&#34;http://extjs-doc-cn.github.io/ext4api/&#34;&gt;http://extjs-doc-cn.github.io/ext4api/&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;本地版本：&lt;a href=&#34;https://github.com/extjs-doc-cn/ext4api&#34;&gt;https://github.com/extjs-doc-cn/ext4api&lt;/a&gt;  （github下载）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;源码下载地址：&lt;a href=&#34;http://extjs.org.cn/download&#34;&gt;http://extjs.org.cn/download&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;总体来说 Extjs数据报表以及布局都还是不错的在代码过程中主要是多查看手册。 其他的就不多说了，多思考，多分析就好。&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>查看svn服务器端的路径信息</title>
      <link>http://blog.cyanme.com/general/%E6%9F%A5%E7%9C%8Bsvn%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%9A%84%E8%B7%AF%E5%BE%84%E4%BF%A1%E6%81%AF/</link>
      <pubDate>2014-11-20 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;最近还没被SVN服务器逼疯：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;问题1 ：svn commit 时提示 -This line, and those below, will be ignored--&lt;/p&gt;&#xA;&#xA;&lt;p&gt;解决方案：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;首先，&amp;rdquo;:q&amp;rdquo;试图关闭关闭文件，&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这时会出现下列选项： Log message unchanged or not specified (a)bort, &amp;copy;ontinue, (e)dit&#xA;:&lt;/p&gt;&#xA;&#xA;&lt;p&gt;然后选择c，会出现下列信息： Sending        xxx.xml Transmitting file data . Committed&#xA;revision xxx.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;此时，代表文件xxx.xml已被成功提交。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;问题2： 查看SVN 当前路径：svn info Path&lt;/p&gt;&#xA;&#xA;&lt;p&gt;问题3： 修改SVN 当前路径：  svn sw --relocate svn://old_ip/目录 svn://new_ip/目录&lt;/p&gt;&#xA;&#xA;&lt;p&gt;svn常用命令：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;svn checkout 地址 ----从svn上下载某个目录的最新版本&#xA;&#xA;svn checkout 地址 -r3345-----从svn上下载某个目录的3345版本&#xA;&#xA;svn update ------对当前的目录进行更新到最近版本&#xA;&#xA;svn diff -r3346&amp;gt;&amp;gt;svn.txt&#xA;-----将当前的目录与svn工具中的该目录的版本号为3346的版本进行对比，并将差异写到文件svn.txt中&#xA;&#xA;svn log ------显示当前svn中所有的当前目录的版本&#xA;&#xA;svn info------显示当前目录最初从svn下载下来时，所下载的版本&#xA;&#xA;svn log -l 3------显示最近三条 log&#xA;&#xA;svn log-----//查看所有版本&#xA;&#xA;svn diff -r47326&#xA;&amp;gt;&amp;gt;svnlog.txt------//将新版本与旧版本r47326进行比较，然后将区别写在svnlog.txt中&#xA;&#xA;svn add 文件名----如果有自己新添加的文件需要提交，那么提交之前，先对该文件进行svn add 文件名，然后再svn commit -m &#39;&#39;&#xA;&#xA;svn st----可以显示自己的版本跟线上版本区别&#xA;&#xA;svn diff tasks.xml-----将自己版本中的tasks.xml和线上的tasks.xml的区别进行分栏显示&#xA;&#xA;svn commit -m &#39;&#39;-----提交所有的文件&#xA;&#xA;svn commit a.cpp----只提交文件a.cpp&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>远程连接Linux Mysql 提示1045</title>
      <link>http://blog.cyanme.com/general/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Linux-Mysql-%E6%8F%90%E7%A4%BA1045/</link>
      <pubDate>2014-11-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;远程使用数据库工具 软件连接 mySql数据时，连接出现 2003-Can’t connect to MySQL on&#xA;’192.168.1.2’(10061)错误时，是由于MySQL不准许远程连接。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如果没有给远程登录用户添加所有机器都能访问的权限，将会出现“1045-Access denied for user root@IT(using&#xA;password:NO)”，这表明需要添加权限；&lt;/p&gt;&#xA;&#xA;&lt;p&gt;解决方法：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;首先进入mysql：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mysql -hlocalhost -uroot -ppassword&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;进入mysql &amp;gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;添加一个远程用户，用户名为username，密码为password，&lt;/p&gt;&#xA;&#xA;&lt;p&gt;支持所以ip远程连接&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mysql &amp;gt;GRANT ALL PRIVILEGES ON *.* TO username@&amp;quot;%&amp;quot; IDENTIFIED BY&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&amp;lsquo;password&amp;rsquo;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如想指定ip 远程访问&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mysql &amp;gt;GRANT ALL PRIVILEGES ON *.* TO username@127.0.0.1&#xA;IDENTIFIED BY &#39;password&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;说明： grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;权限1,权限2,…权限n代表select,insert,update,delete,create,drop,index,alter,grant,refere&#xA;nces,reload,shutdown,process,file等14个权限。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;当权限1,权限2,…权限n被all privileges或者all代替，表示赋予用户全部权限。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;当数据库名称.表名称被*.*代替，表示赋予用户操作服务器上所有数据库所有表的权限。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;用户地址可以是localhost，也可以是ip地址、机器名字、域名。也可以用’%&amp;lsquo;表示从任何地址连接。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;‘连接口令’不能为空，否则创建失败。&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;grant all 赋予所有的权限&lt;/li&gt;&#xA;&lt;li&gt;gamesp.* 数据库 gamesp 中所有的表&lt;/li&gt;&#xA;&lt;li&gt;newuser 用户名&lt;/li&gt;&#xA;&lt;li&gt;@localhost 在本地电脑上的 mysql server 服务器&lt;/li&gt;&#xA;&lt;li&gt;identfified by &amp;lsquo;password&amp;rsquo; 设置密码&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;</description>
    </item>
    <item>
      <title>Linux 搭建SVN 多版本库</title>
      <link>http://blog.cyanme.com/general/Linux-%E6%90%AD%E5%BB%BASVN-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%BA%93/</link>
      <pubDate>2014-11-04 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;1.环境 centos5.5&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2.安装svn yum -y install subversion //安装svn&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3.配置 建立版本库目录&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mkdir /var/svndata &#xA;&#xA;svnserve -d -r /var/svndata //启动svn（多版本库方式启动） &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;4.建立版本库 创建一个新的Subversion项目&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;svnadmin create /www/svndata/oplinux &#xA;&#xA;配置允许用户vicky访问 &#xA;&#xA;cd /www/svndata/oplinux/conf &#xA;&#xA;vi svnserve.conf &#xA;&#xA;    anon-access=none &#xA;&#xA;    auth-access=write &#xA;&#xA;    password-db=passwd &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;注：修改的文件前面不能有空格，否则启动svn server出错&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;vi passwd &#xA;&#xA;    [users] &#xA;&#xA;    # &amp;amp;lt;user1&amp;amp;gt;=&amp;amp;lt;user1&amp;amp;gt;  &#xA;&#xA;    # &amp;amp;lt;user2&amp;amp;gt;=&amp;amp;lt;user2&amp;amp;gt;  &#xA;&#xA;    vicky=123456 &#xA;&#xA;配置权限 vi authz 指令简介：此配置文件采用“基于路径的授权”策略，中括号里指定路径，以下列出对各用户的授权。 &#xA;&#xA;包括只读r，读写rw。没有列出的用户，则不允许访问。还可以对用户分组，具体请参考svn手册，以下是简单例子： &#xA;&#xA;[groups] &#xA;&#xA;admin = vicky //设置管理员组内成员有 vicky &#xA;&#xA;[/] @admin=rw //给管理员组读写权限 &#xA;&#xA; *=  // 其他权限为空 &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;5.客户端连接 svn co svn://ip/oplinux 用户名密码:123456&lt;/p&gt;&#xA;&#xA;&lt;p&gt;6.实现SVN与WEB同步,可以CO一个出来,也可以直接配在仓库中&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1)设置WEB服务器根目录为/www/webroot &#xA;&#xA;2)checkout一份&#xA;&#xA;    SVN svn co svn://localhost/oplinux /www/webroot &#xA;&#xA;    修改权限为WEB用户&#xA;&#xA;     chown -R apache:apache /www/webroot/oplinux &#xA;&#xA;3)建立同步脚本 &#xA;&#xA;    cd /www/svndata/oplinux/hooks/ &#xA;&#xA;    cp post-commit.tmpl post-commit &#xA;&#xA;    编辑post-commit,在文件最后添加以下内容 &#xA;&#xA;    #!/bin/sh &#xA;&#xA;    export LANG=en_US.UTF-8 &#xA;&#xA;    SVN=/usr/bin/svn WEB=/www/webroot/ &#xA;&#xA;    $SVN update $WEB -–username vicky -–password 123456 &#xA;&#xA;    chown -R apache:apache $WEB &#xA;&#xA;     增加脚本执行权限 &#xA;&#xA;    chmod +x post-commit&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>坚持就是希望。</title>
      <link>http://blog.cyanme.com/general/%E5%9D%9A%E6%8C%81%E5%B0%B1%E6%98%AF%E5%B8%8C%E6%9C%9B%E3%80%82/</link>
      <pubDate>2014-08-08 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;文章标题虽然俗了点。但是却最能表达出我想说的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;用了 Lunix服务器，配置了Lnmp环境，我本想着安装过程中，或者以后使用中，都有Eric&#xA;帮我，所以在整个安装配置过程中，我都没有一点犹豫。哪知道，这次Eric&#xA;采取半抛弃政策，把Lnmp的一键安装好后，就开始实施政策了。政策实施时，我提出反对，不过反对无效。Eric 说不要把服务器整崩了就算我厉害。&#xA;幸好我还是厉害的。在配置 Nginx 虚拟目录时，配置WordPress中，问题不断，也有找Eric帮助的，总是还是弄出来了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;问题总结如下：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1.基础中的基础Linux 命令：&lt;a href=&#34;http://www.ioesse.com/hqjs/upload/info.pdf&#34;&gt;http://www.ioesse.com/hqjs/upload/info.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2.nginx 虚拟目录配置（可以在 /usr/local/nginx/conf /nginx.conf 中直接配置）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在/usr/local/nginx/conf/vhost 新建vhost.conf&lt;/p&gt;&#xA;&#xA;&lt;p&gt;然后配置server 配置过程中可以参考 /usr/local/nginx/conf /nginx.conf 中的server配置，（每个版有差异）。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;3.WordPress中的默认主题只显示一个？ 是由于lnmp下默认php禁用了scandir 函数（lnmp认为 scandir&#xA;是危险函数），需要进入php.ini配置文件 /usr/local/php/etc/php.ini 中找到disable function&#xA;,去掉scandir，然后重 启PHP服务 /etc/init.d/php-fpm restart 就可以了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;4.WordPress下载主题，插件，删除插件时，都提示需要FTP账号密码？&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这是linux的机制问题，利用chown语句将网站目录的所有者设置给服务器就可以了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;很简单，登录 putty，使用chown -R www /home/wwwroot/网站目录名。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;最后总结下，问题虽然不断，并且也让我很纠结，但是在Eric的重打击和半放弃的情况下，我还是把它研究出来了，虽然方法都不是我想到了，但是也是根据自己查到的各&#xA;种方法，进行尝试，最后取得胜利了。 所以坚持就是希望。坚持就是胜利。以后还有更多需要我坚持的东西。我很期待充满希望的未来。&lt;/p&gt;&#xA;</description>
    </item>
  </channel>
</rss>